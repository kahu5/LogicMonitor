{
  "collectionMethod": "script",
  "datapoints": [
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "threshold": "<= 45",
      "interpretExpr": "ExpirationDays",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "2TVVs6ygRQW3SwI9bVXc_g",
      "useValue": "output",
      "min": "",
      "name": "ExpirationDaysRemaining",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "LicensedInstancesNumber",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "pQzSXZ5dSI2u0VHVd1IllQ",
      "useValue": "output",
      "min": "",
      "name": "LicensedInstancesNumber",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "NewInstancesNumber",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "UEm_wjdXT7-0Gm080OMWpg",
      "useValue": "output",
      "min": "",
      "name": "NewInstancesNumber",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "RentalInstancesNumber",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "mdooPo2bTqiUIh-CLBeVIw",
      "useValue": "output",
      "min": "",
      "name": "RentalInstancesNumber",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "UsedInstancesNumber",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "wDmYhcBrSsCl7_d7PJPiBw",
      "useValue": "output",
      "min": "",
      "name": "UsedInstancesNumber",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "totalCloud",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "oOCmmd8BSh2L6L2WlAv2Vw",
      "useValue": "output",
      "min": "",
      "name": "totalCloudRepVMs",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "totalServers",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "4wVlYK7xQzi_GkFiurQAGg",
      "useValue": "output",
      "min": "",
      "name": "totalServers",
      "noData": "Do not trigger an alert"
    },
    {
      "max": "",
      "triggerInterval": 0,
      "dataType": 7,
      "maxDigits": 4,
      "interpretMethod": "namevalue",
      "interpretExpr": "totalVMs",
      "type": "gauge",
      "clearInterval": 0,
      "originId": "KKglh1TuS323sG9JMWA07w",
      "useValue": "output",
      "min": "",
      "name": "totalVMs",
      "noData": "Do not trigger an alert"
    }
  ],
  "searchKeywords": "",
  "displayedAs": "Veeam Licensing",
  "description": "Collection of licensing datapoints for the Veeam BackupAndReplication software",
  "appliesTo": "hasCategory(\"VeeamBackupAndReplicationPowerShell\")",
  "collectionAttrs": {
    "type": "powershell",
    "content": "<# Â© 2007-2023 - LogicMonitor, Inc.  All rights reserved. #>\n$debug = $false\n\nfunction Write-DebugMessage {\n    param (\n        [string]$message\n    )\n\n    if ($debug) {\n        Write-Host \"[DEBUG] $message\"\n    }\n}\n\n$hostname = '##system.hostname##'\n$categories = '##system.categories##'\n\nWrite-DebugMessage \"Hostname: $hostname\"\nWrite-DebugMessage \"Categories: $categories\"\n\n# If the hostname is an IP address, query DNS for the FQDN\nif ($hostname -match \"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b\") {\n    $hostname = [System.Net.Dns]::GetHostbyAddress($hostname).HostName\n    Write-DebugMessage \"Converted IP to FQDN: $hostname\"\n}\n\n# Credentials Initialization\n$veeam_user = @'\n##veeam.user##\n'@\n$veeam_pass = @'\n##veeam.pass##\n'@\n$wmi_user = @'\n##wmi.user##\n'@\n$wmi_pass = @'\n##wmi.pass##\n'@\n\n# Determine which credentials to use (Veeam or WMI)\n$UseCredentials = $true\nif (-not $veeam_user -or $veeam_user -like \"*veeam.user*\") {\n    $veeam_user = $wmi_user\n    $veeam_pass = $wmi_pass\n    Write-DebugMessage \"Using WMI credentials for Veeam.\"\n}\n\nif ([string]::IsNullOrEmpty($veeam_user) -or $veeam_user -like \"*veeam.user*\" -or [string]::IsNullOrEmpty($veeam_pass) -or $veeam_pass -like \"*veeam.pass*\") {\n    $UseCredentials = $false\n    Write-DebugMessage \"No valid credentials found.\"\n}\n\n# Function to create a Veeam connection session\nfunction Create-VeeamSession {\n    param (\n        [string]$hostname,\n        [string]$user = $null,\n        [string]$pass = $null\n    )\n\n    Write-DebugMessage \"Creating Veeam session for host: $hostname\"\n    return Get-VeeamConnection -VeeamHostname $hostname -VeeamUsername $user -VeeamPassword $pass\n}\n\n# Helper method to start a session\nfunction Get-VeeamConnection {\n    Param (\n        [Parameter(Mandatory = $true)]\n        [string] $VeeamHostname,\n\n        [string] $VeeamUsername,\n\n        [string] $VeeamPassword\n    )\n\n    $max_attempts = 2\n    $attempt_sleep = 2\n    $current_attempt_count = 0\n\n    # Create credential object\n    $creds = if ($VeeamUsername -and $VeeamPassword) {\n        $secure_pass = ConvertTo-SecureString -String $VeeamPassword -AsPlainText -Force\n        New-Object -typename System.Management.Automation.PSCredential($VeeamUsername, $secure_pass)\n    }\n\n    Write-DebugMessage \"Attempting to connect to Veeam on $VeeamHostname with ${max_attempts} attempts.\"\n\n    # Attempt to acquire a persistent session object until we hit the $max_attempts value.\n    while (-not $veeam_session -and ($current_attempt_count -lt $max_attempts)) {\n        $current_attempt_count++\n        Write-DebugMessage \"Attempt number: $current_attempt_count\"\n\n        $veeam_session = if ($creds) {\n            New-PSSession -ComputerName $VeeamHostname -Credential $creds\n        } else {\n            New-PSSession -ComputerName $VeeamHostname\n        }\n\n        Start-Sleep -Seconds $attempt_sleep\n    }\n\n    # Ensure that the session was successfully created\n    if (-not $veeam_session) {\n        Write-Host \"Error connecting session.  Terminating.\"\n        Exit\n    }\n\n    # We have a session, add the Veeam Snap-in\n    Invoke-Command -Session $veeam_session -ScriptBlock {\n        Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue\n    }\n\n    Write-DebugMessage \"Successfully connected to Veeam on $VeeamHostname.\"\n    return $veeam_session\n}\n\n# The command to be run on the host\n$command = {\n    $regBinary = (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\VeeaM\\Veeam Backup and Replication\\license' -Name 'Lic1' -EA SilentlyContinue).Lic1\n        if ($null -ne $regBinary) {\n            Write-Output \"The License value was found\"\n        } else {\n            Write-Output \"'Lic1' does not exist or you do not have sufficient permissions to read it.\"\n        }\n        \n        $veeamLicInfo = [string]::Join($null, ($regBinary | % { [char][int]$_; }))  \n        $ExpirationDateFormat = \"License expires\\=\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}\"\n        $ExpirationDate = [regex]::matches($VeeamLicInfo, $ExpirationDateFormat)[0].Value.Split(\"=\")[1]\n        \n        if ($null -ne $ExpirationDate) {\n            # Convert the expiration date to a DateTime object\n            try {\n                $ExpirationDate = [DateTime]::ParseExact($ExpirationDate, \"dd/MM/yyyy\", $null)\n            } catch {\n                Write-Output \"Unable to parse the expiration date. Please check the date format and the license information.\"\n                return\n            }\n        \n            # Calculate the remaining days until the expiration date\n            $Today = Get-Date\n            $RemainingDays = ($ExpirationDate - $Today).Days\n\n        } else {\n            Write-Output \"Expiration date not found in the license information.\"\n        }\n\n    Write-Host \"ExpirationDays=$($RemainingDays)\"\n\n    \n    $license = Get-VBRInstalledLicense\n        Write-Host \"LicensedInstancesNumber=$($license.InstanceLicenseSummary.LicensedInstancesNumber)\"\n        Write-Host \"UsedInstancesNumber=$($license.InstanceLicenseSummary.UsedInstancesNumber)\"\n        Write-Host \"NewInstancesNumber=$($license.InstanceLicenseSummary.NewInstancesNumber)\"   \n        Write-Host \"RentalInstancesNumber=$($license.InstanceLicenseSummary.RentalInstancesNumber)\"\n        \n        $licenseObject = $license.InstanceLicenseSummary.Object\n        #Write-Host \"Object:$($licenseObject | Out-String)`n\"\n        # Parse License object\n        $VM = 0\n        $Server = 0\n        $CloudConnectReplicationVM = 0\n        $i = 1\n        foreach ($object in $licenseObject) {\n                if ($object.Type -eq \"VM\") {\n                $VM = $object.Count\n                }\n                elseif ($object.Type -eq \"Server\") {\n                    $Server = $object.Count\n                }\n                elseif ($object.Type -eq \"CloudConnectReplicationVM\") {\n                    $CloudConnectReplicationVM = $object.Count\n                }\n            $ObjType = $object.Type\n            $ObjCount = $object.Count\n            $ObjMultiplier = $object.Multiplier\n            $ObjUsedInstancesNumber = $object.UsedInstancesNumber\n            Write-Output \"OBJ$i=Type: $ObjType, Count: $ObjCount, Multiplier: $ObjMultiplier, UsedInstancesNumber: $ObjUsedInstancesNumber\"\n            $i++\n        }\n        Write-Output \"totalVMs=$($VM)\"\n        Write-Output \"totalServers=$($Server)\"\n        Write-Output \"totalCloud=$($CloudConnectReplicationVM)\"\n        \n        $licenseWorkload = $license.InstanceLicenseSummary.Workload\n        #Write-Host \"Object:$($licenseWorkload | Out-String)`n\"\n        # Parse Workload object\n        $i = 1\n        foreach ($object in $licenseWorkload) {\n            $WorkloadName = $object.Name\n            $WorkloadUsedInstancesNumber = $object.UsedInstancesNumber\n            $WorkloadType = $object.Type\n            $WorkloadInstanceId = $object.InstanceId\n            Write-Output \"Workload$i=Name: $WorkloadName, UsedInstancesNumber: $WorkloadUsedInstancesNumber, Type: $WorkloadType`n\"\n            $i++\n        }\n        \n        $SocketLicenseSummary =$license.SocketLicenseSummary\n        Write-Host \"$($SocketLicenseSummary | Out-String)`n\"\n}\n\n## BEGIN MAIN SCRIPT\n\n# Check if it's a collector\nif (-not($categories.toLower().Contains('collector'))) {\n    # If not a collector, create a persistent session and invoke command\n    if ($UseCredentials) {\n        $session1 = Create-VeeamSession $hostname $veeam_user $veeam_pass\n    } else {\n        $session1 = Create-VeeamSession $hostname\n    }\n    Invoke-Command -Session $session1 -ScriptBlock $command\n} else {\n    # If it's a collector, add the Veeam snap-in and execute command\n    Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue\n    & $command\n}\n\n# Close the session if one exists\nif ($session1) {\n    Get-PSSession | Remove-PSSession\n}"
  },
  "type": 0,
  "technicalNotes": "reference: https://helpcenter.veeam.com/docs/backup/powershell/get-vbrinstalledlicense.html?ver=120",
  "useWildValueAsUniqueIdentifier": false,
  "version": 1703082803,
  "registryMetadata": {
    "currentUuid": "4D4MsANnTaKBDISnqaw1Ug",
    "originalUuid": "4D4MsANnTaKBDISnqaw1Ug",
    "locatorId": "",
    "authorCompanyUuid": "82eee13d-ea07-4940-9823-f96d2bf796e2",
    "registryVersion": "1.1.0",
    "checksum": "9a192bb49b0b583e081bc54b1efbd826",
    "namespace": "",
    "registryId": ""
  },
  "multiInstance": false,
  "integrationMetadata": {
    "publishedAtMS": 1702666260270,
    "authorCompanyUuid": "82eee13d-ea07-4940-9823-f96d2bf796e2",
    "namespace": "emergeits",
    "registryVersion": "1.1.0",
    "name": "",
    "checksum": "d0747388c46e2411dd226d9668b1d4dd",
    "registryId": "81f7cb35-69ee-4107-b78a-f286571c93e5",
    "isPrivate": true,
    "locator": "TCXRYW",
    "lineageId": "4D4MsANnTaKBDISnqaw1Ug",
    "status": "SECURITY_REVIEW"
  },
  "name": "Veeam_BackupAndReplication_Licensing",
  "collectionInterval": "4h",
  "dataSourceType": 1,
  "group": ""
}